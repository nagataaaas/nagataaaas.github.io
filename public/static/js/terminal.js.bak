"use strict";

// https://pyodide.org/en/stable/console.html
// https://www.youtube.com/watch?v=-SggWFS15Do
// „Åì„Å°„Çâ„ÅÆ„Ç≥„Éº„Éâ„ÇíÂèÇËÄÉ„Å´„Åó„Å¶„ÅÑ„Åæ„Åô

let terminal;
const inputCondition = {
    accepting: false,
    result: null,
}

$(document).on('click', 'button.run-button', async function (e) {
    if (!terminal) {
        await newConsole();
    }
    const code = e.target.nextElementSibling.innerText;
    for (const c of code.split("\n")) {
        if (c.startsWith('#')) continue;

        let unlock = await lock();
        term.exec(c)
        unlock();
    }
})

async function initPyodide() {
    globalThis.pyodide = await loadPyodide();
}

function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

function closeConsole(id) {
    $("#" + id).remove();
    terminal = null;
}

function newConsoleDiv() {
    const newConsole = document.createElement("div");
    let newConsoleId = "terminal";
    newConsole.id = "terminal-window";
    newConsole.innerHTML = `
            <div class="header">
            <span> üêç Python Interpreter</span>
                <button onclick="closeConsole('${newConsole.id}')"><span class="close-btn">&times;</span></button>
            </div>
            <div id="terminal"></div>`
    document.getElementById("terminal-container").appendChild(newConsole);
    $(newConsole).draggable({
        handle: ".header",
        scroll: false,
    });
    $(newConsole).resizable({
        minHeight: 200,
        minWidth: 300,
        maxHeight: 600,
        maxWidth: 800
    });
    terminal = newConsoleId;
    return newConsoleId;
}

async function lock() {
    let resolve;
    let ready = term.ready;
    term.ready = new Promise((res) => (resolve = res));
    await ready;
    return resolve;
}

async function newConsole() {
    let namespace = pyodide.globals.get("dict")();
    pyodide.runPython(
        `
            import sys
            from pyodide import to_js
            from pyodide.console import PyodideConsole, repr_shorten, BANNER
            import __main__
            BANNER = "Welcome to the Pyodide terminal emulator üêç\\n" + BANNER
            pyconsole = PyodideConsole(__main__.__dict__)
            import builtins
            async def await_fut(fut):
              res = await fut
              if res is not None:
                builtins._ = res
              return to_js([res], depth=1)
            def clear_console():
              pyconsole.buffer = []
        `,
        {globals: namespace}
    );
    let banner = namespace.get("BANNER");
    let await_fut = namespace.get("await_fut");
    let pyconsole = namespace.get("pyconsole");
    let clear_console = namespace.get("clear_console");
    namespace.destroy();

    let ps1 = ">>> ",
        ps2 = "... ";


    async function interpreter(command) {
        let unlock = await lock();
        term.pause();
        for (const c of command.split("\n")) {
            let fut = pyconsole.push(c);
            term.set_prompt(fut.syntax_check === "incomplete" ? ps2 : ps1);
            switch (fut.syntax_check) {
                case "syntax-error":
                    term.error(fut.formatted_error.trimEnd());
                    continue;
                case "incomplete":
                    continue;
                case "complete":
                    break;
                default:
                    throw new Error(`Unexpected type ${ty}`);
            }
            let wrapped = await_fut(fut);
            try {
                let [value] = await wrapped;
                if (value !== undefined) {
                    term.echo(value);
                }
                if (pyodide.isPyProxy(value)) {
                    value.destroy();
                }
            } catch (e) {
                if (e.constructor.name === "PythonError") {
                    const message = fut.formatted_error || e.message;
                    term.error(message.trimEnd());
                } else {
                    throw e;
                }
            } finally {
                fut.destroy();
                wrapped.destroy();
            }
        }
        term.resume();
        await sleep(30);
        unlock();
    }

    let term = $('#' + newConsoleDiv()).terminal(interpreter, {
        greetings: banner,
        prompt: ps1,
        completionEscape: false,
        completion: function (command, callback) {
            callback(pyconsole.complete(command).toJs()[0]);
        },
        keymap: {
            "CTRL+C": async function (event, original) {
                clear_console();
                term.echo_command();
                term.echo("KeyboardInterrupt");
                term.set_command("");
                term.set_prompt(ps1);
            },
            "TAB": (event, original) => {
                const command = term.before_cursor();
                // Disable completion for whitespaces.
                if (command.trim() === "") {
                    term.insert("\t");
                    return false;
                }
                return original(event);
            }
        },
    });
    window.term = term;
    pyconsole.stdout_callback = (s) => term.echo(s, {newline: false});
    pyconsole.stderr_callback = (s) => {
        term.error(s.trimEnd());
    };
    term.ready = Promise.resolve();
    pyodide._module.on_fatal = async (e) => {
        term.error(
            "Pyodide has suffered a fatal error. Please report this to the Pyodide maintainers."
        );
        term.error("The cause of the fatal error was:");
        term.error(e);
        term.error("Look in the browser console for more details.");
        await term.ready;
        term.pause();
        await sleep(15);
        term.pause();
    };
}

window.console_ready = initPyodide();